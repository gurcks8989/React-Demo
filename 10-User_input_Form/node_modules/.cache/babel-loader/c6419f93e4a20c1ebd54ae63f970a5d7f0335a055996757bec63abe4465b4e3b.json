{"ast":null,"code":"var _jsxFileName = \"/Users/hyeokchani/Desktop/React/10-User_input_Form/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport useInput from \"../hooks/useInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const name = useInput(value => value.trim() !== \"\");\n\n  // const [enteredElements, setEnteredElements] = useState({\n  //   name: \"\",\n  //   email: \"\",\n  // });\n  // const [enteredElementsTouched, setEnteredElementsTouched] = useState({\n  //   name: false,\n  //   email: false,\n  // });\n  // const enteredElementsIsValid = {\n  //   name: enteredElements.name.trim() !== \"\",\n  //   email: enteredElements.email.trim() !== \"\",\n  //   emailCondition:\n  //     enteredElements.email.trim() !== \"\" &&\n  //     enteredElements.email.includes(\"@\"),\n  // };\n  // const inputInvalid = {\n  //   name: enteredElementsTouched.name && !enteredElementsIsValid.name,\n  //   email: enteredElementsTouched.email && !enteredElementsIsValid.email,\n  //   emailCondition:\n  //     enteredElementsTouched.email &&\n  //     enteredElementsIsValid.email &&\n  //     !enteredElementsIsValid.emailCondition,\n  // };\n\n  let formIsValid = false;\n\n  // if (Object.values(inputInvalid).every((enterdElement) => enterdElement))\n  if (!name.hasError) formIsValid = true;\n\n  // const nameInputChangeHandler = (event) => {\n  //   setEnteredElements((prevState) => {\n  //     return { ...prevState, name: event.target.value };\n  //   });\n  // };\n\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredElementsTouched((prevState) => {\n  //     return { ...prevState, name: true };\n  //   });\n  // };\n\n  // const emailInputChangeHandler = (event) => {\n  //   setEnteredElements((prevState) => {\n  //     return { ...prevState, email: event.target.value };\n  //   });\n  // };\n\n  // const emailInputBlurHandler = (event) => {\n  //   setEnteredElementsTouched((prevState) => {\n  //     return { ...prevState, email: true };\n  //   });\n  // };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    // if (Object.values(inputInvalid).every((enteredElement) => !enteredElement))\n    if (name.hasError) return;\n    console.log(name);\n\n    // nameInputRef.current.value = '' ;\n    // NOT IDEAL, DON'T MANIPULATE THE DOM\n    setEnteredElements({\n      name: \"\",\n      email: \"\"\n    });\n    setEnteredElementsTouched({\n      name: false,\n      email: false\n    });\n  };\n  const errorContent = errorType => /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"error-text \",\n    children: [\"$\", errorType]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `form-control ${name.hasError && \"invalid\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: name.valueChangeHandler,\n        onBlur: name.inputBlurHandler,\n        value: name.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), name.hasError && errorContent(\"Name must not be empty.\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `form-control ${email.hasError && \"invalid\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your E-mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: email.valueChangeHandler,\n        onBlur: email.inputBlurHandler,\n        value: email.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), email.has && errorContent(\"Email must not be empty.\"), inputInvalid.emailCondition && errorContent(\"Email must include an '@'.\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"KX9jBLD19Oaqt4W2y+pGAiFZrUA=\", false, function () {\n  return [useInput];\n});\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["React","useState","useInput","jsxDEV","_jsxDEV","SimpleInput","props","_s","name","value","trim","formIsValid","hasError","formSubmissionHandler","event","preventDefault","console","log","setEnteredElements","email","setEnteredElementsTouched","errorContent","errorType","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","valueChangeHandler","onBlur","inputBlurHandler","has","inputInvalid","emailCondition","disabled","_c","$RefreshReg$"],"sources":["/Users/hyeokchani/Desktop/React/10-User_input_Form/src/components/SimpleInput.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport useInput from \"../hooks/useInput\";\n\nconst SimpleInput = (props) => {\n  const name = useInput((value) => value.trim() !== \"\");\n\n  // const [enteredElements, setEnteredElements] = useState({\n  //   name: \"\",\n  //   email: \"\",\n  // });\n  // const [enteredElementsTouched, setEnteredElementsTouched] = useState({\n  //   name: false,\n  //   email: false,\n  // });\n  // const enteredElementsIsValid = {\n  //   name: enteredElements.name.trim() !== \"\",\n  //   email: enteredElements.email.trim() !== \"\",\n  //   emailCondition:\n  //     enteredElements.email.trim() !== \"\" &&\n  //     enteredElements.email.includes(\"@\"),\n  // };\n  // const inputInvalid = {\n  //   name: enteredElementsTouched.name && !enteredElementsIsValid.name,\n  //   email: enteredElementsTouched.email && !enteredElementsIsValid.email,\n  //   emailCondition:\n  //     enteredElementsTouched.email &&\n  //     enteredElementsIsValid.email &&\n  //     !enteredElementsIsValid.emailCondition,\n  // };\n\n  let formIsValid = false;\n\n  // if (Object.values(inputInvalid).every((enterdElement) => enterdElement))\n  if (!name.hasError) formIsValid = true;\n\n  // const nameInputChangeHandler = (event) => {\n  //   setEnteredElements((prevState) => {\n  //     return { ...prevState, name: event.target.value };\n  //   });\n  // };\n\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredElementsTouched((prevState) => {\n  //     return { ...prevState, name: true };\n  //   });\n  // };\n\n  // const emailInputChangeHandler = (event) => {\n  //   setEnteredElements((prevState) => {\n  //     return { ...prevState, email: event.target.value };\n  //   });\n  // };\n\n  // const emailInputBlurHandler = (event) => {\n  //   setEnteredElementsTouched((prevState) => {\n  //     return { ...prevState, email: true };\n  //   });\n  // };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    // if (Object.values(inputInvalid).every((enteredElement) => !enteredElement))\n    if (name.hasError) return;\n\n    console.log(name);\n\n    // nameInputRef.current.value = '' ;\n    // NOT IDEAL, DON'T MANIPULATE THE DOM\n    setEnteredElements({ name: \"\", email: \"\" });\n    setEnteredElementsTouched({ name: false, email: false });\n  };\n\n  const errorContent = (errorType) => (\n    <p className=\"error-text \">${errorType}</p>\n  );\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={`form-control ${name.hasError && \"invalid\"}`}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={name.valueChangeHandler}\n          onBlur={name.inputBlurHandler}\n          value={name.value}\n        />\n        {name.hasError && errorContent(\"Name must not be empty.\")}\n        </div>\n        <div\n          className={`form-control ${\n            email.hasError && \"invalid\"\n          }`}\n        >\n          <label htmlFor=\"email\">Your E-mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            onChange={email.valueChangeHandler}\n            onBlur={email.inputBlurHandler}\n            value={email.value}\n          />\n          {email.has && errorContent(\"Email must not be empty.\")}\n          {inputInvalid.emailCondition &&\n            errorContent(\"Email must include an '@'.\")}\n        </div>\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}